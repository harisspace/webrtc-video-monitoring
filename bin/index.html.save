<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WEBRTC</title>
    <link rel="stylesheet" href="/static/style.css">
    <script>
        window.addEventListener("load", function (e) {
    // global websocket instance
    let ws, sendChannel
    // html
    let btnOpenCamera = document.querySelector(".btn-open-camera")
    let btnCloseCamera = document.getElementById("btn-close-camera")
    let remoteVideo = document.querySelector(".remote-video")
    let cameraCard = document.querySelector('.camera-card')
    let baseVideoWrapper = document.querySelector('.base-video-wrapper')
    let goLeft = document.querySelector(".left")
    let goRight = document.querySelector(".right")
    let stopStream = document.querySelector(".stop-stream")
    let selectResolution = document.getElementById("resolutions")
    let resolution = '480p'
    
    baseVideoWrapper.style.display = "none";
  
    selectResolution.onchange = changeResolutionVal
    
    // webrtc config
    let rtcpc

    const iceServers = {
    'iceServer': [
            {'url': 'stun:stun.l.google.com:19302'}
        ]
    }

        // websocket
        ws = new WebSocket("{{.}}")

        ws.onopen = (e) => {
            console.log("ws open")
        }

        ws.onclose = (e) => {
            console.log("ws close")
        }

        ws.onmessage = (e) => {
            let msg = JSON.parse(e.data)
            switch (msg.topic) {
                case 'candidate':
                    console.log('ice candidate-raspberry', JSON.parse(msg.data))
                    const candidate = new RTCIceCandidate(JSON.parse(msg.data))
                    rtcpc.addIceCandidate(candidate)
                        .catch(err => console.log(err))
                    break
                case 'answer':
                    console.log('answer coming', JSON.parse(msg.data))
                    rtcpc.setRemoteDescription(JSON.parse(msg.data))
                    break;
                default:
                    break;
            }
        }

    function changeResolutionVal() {
        resolution = selectResolution.value
        console.log(resolution)
        ws.send(JSON.stringify({
            topic: 'resolution',
            data: resolution
        }))
    }
    // ===== EVENT =====
    const offerOptions = {
    offerToReceiveVideo: 1
  }
    // ===== CAMERA EVENT WITH WEBRTC =====
    btnOpenCamera.onclick = async (e) => {
        rtcpc = new RTCPeerConnection(iceServers)
        rtcpc.onsignalingstatechange = signalingStateCallback
        rtcpc.oniceconnectionstatechange = iceStateCallback
        rtcpc.onconnectionstatechange = connStateCallback
        rtcpc.onicecandidate = onIceCandidate
        rtcpc.ontrack = onAddStream
        rtcpc.addTransceiver('video', {
            'direction': 'recvonly'
        })
	rtcpc.addTransceiver('audio', {
            'direction': 'recvonly'
        })
	
        sendChannel = rtcpc.createDataChannel('foo')
        sendChannel.onclose = () => console.log('sendChannel has closed')
        sendChannel.onopen = () => console.log('sendChannel has opened')
        sendChannel.onmessage = e => console.log(`Message from DataChannel '${sendChannel.label}' payload '${e.data}'`)
        const sessionDescription = await rtcpc.createOffer()
        rtcpc.setLocalDescription(sessionDescription)
        console.log("offer sending: ", sessionDescription)
        ws.send(JSON.stringify({
            topic: 'offer',
            data: JSON.stringify(sessionDescription)
        }))
    }

    // callback
    function onAddStream(e) {
        console.log("got remote stream")
        baseVideoWrapper.style.display = 'flex';
        cameraCard.style.display = 'none'
        const el = document.createElement(e.track.kind)
        el.srcObject = e.streams[0]
        el.controls = true
        el.autoplay = true
        remoteVideo.appendChild(el)
    }

    function signalingStateCallback() {
        let state;
        if (rtcpc) {
            state = rtcpc.signalingState
            console.log("signaling state: ", state)
        }
    }

    function iceStateCallback() {
        let iceState
        if (rtcpc) {
            iceState = rtcpc.iceConnectionState
            console.log("ICE connection state: ", iceState)
        }
    }

    function connStateCallback() {
        let connState
        if (rtcpc && rtcpc.connectionState) console.log("Connection state: ", rtcpc.connectionState)
    }

    function onIceCandidate(e) {
        if (e.candidate != null & ws != null) {
            offerSD = rtcpc.localDescription
            console.log('ice candidate-client', e.candidate, "\noffer: ",offerSD)
            ws.send(JSON.stringify({
                topic: 'candidate',
                data: JSON.stringify(e.candidate)
            }))
        }
    }

    // ==== SERVO EVENT WITH DATA CHANNEL ====
    
    goLeft.onclick = () => {
        let timeNow = new Date()
    let hours = timeNow.getHours()
    let minutes = timeNow.getMinutes()
    let seconds = timeNow.getSeconds()
    let milliSeconds = timeNow.getMilliseconds()
    let timeStamps = hours + ":" + minutes + ":" + seconds + ":" + milliSeconds
        console.log(timeStamps)
	setInterval(() => {}
,)
        sendChannel.send("go-left")
    }

    goRight.onclick = () => {
        let timeNow = new Date()
    let hours = timeNow.getHours()
    let minutes = timeNow.getMinutes()
    let seconds = timeNow.getSeconds()
    let milliSeconds = timeNow.getMilliseconds()
    let timeStamps = hours + ":" + minutes + ":" + seconds + ":" + milliSeconds
        console.log(timeStamps)
        sendChannel.send("go-right")
    }
    
    // ===== STOP STREAM =====
    //stopStream.onclick = () => {
    //    sendChannel.send("stop-stream")
    //}
})
    </script>
</head>
<body>
    <main>
        <!-- camera card -->
        <div class="camera-card">
            <div class="base-camera-wrapper">
                <div class="camera-wrapper">
                    <img src="/static/img/logitech-1080.jpeg" alt="logitech 1080HD">
                </div>
            </div>
            <button class="btn-open-camera">Lihat kamera</button>
            <br>
            <label>Pilih resolusi video</label>
            <select id="resolutions">
		<option value="480p">480p</option>
                <option value="240p">240p</option>
                <option value="720p">720p</option>
                <option value="1080p">1080p</option>
            </select>
        </div>

        <!--------------------------- video wrapper ----------------------------------->
        <div class="base-video-wrapper">
            <div class="video-card">
                <div class='remote-video'></div>
                <div class="arrow-wrapper">
                    <div>
                        <button class="button-20" role="button">
                            <i class="arrow left"></i>
                        </button>
                    </div>
                    <div>
                        <button class="button-20" role="button">
                            <i class="arrow right"></i>
                        </button>
                    </div>
                </div>
            </div>
            <div class="arrow-legend">
                <h3>Kontrol</h3>
                <div>
                    <button class="button-20" role="button">
                        <i class="arrow left"></i>
                    </button>
                    <span>Kanan</span>
                </div>
                <div>
                    <button class="button-20" role="button">
                        <i class="arrow right"></i>
                    </button>
                    <span>Kiri</span>
                </div>
            </div>
        </div>
    </main>
</body>
</html>
